(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return g}));var a=t(3),r=t(7),i=(t(0),t(135)),o={title:"\u6570\u636e\u5e93-\u57fa\u7840\u5e94\u7528"},s={unversionedId:"database",id:"database",isDocsHomePage:!1,title:"\u6570\u636e\u5e93-\u57fa\u7840\u5e94\u7528",description:"\u914d\u7f6e",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/database.md",slug:"/database",permalink:"/zh-CN/docs/database",editUrl:"https://github.com/LyuWeihua/ReadyWork/edit/master/website/docs/database.md",version:"current",sidebar:"docs",previous:{title:"\u53c2\u6570\u6821\u9a8c\u5668",permalink:"/zh-CN/docs/validator"},next:{title:"\u6570\u636e\u5e93-Auto\u6ce8\u89e3",permalink:"/zh-CN/docs/database-auto"}},l=[{value:"\u914d\u7f6e",id:"\u914d\u7f6e",children:[]},{value:"\u6f14\u793a\u6570\u636e",id:"\u6f14\u793a\u6570\u636e",children:[]},{value:"\u57fa\u672c\u4f7f\u7528",id:"\u57fa\u672c\u4f7f\u7528",children:[]},{value:"\u4ee3\u7801\u751f\u6210\u5668",id:"\u4ee3\u7801\u751f\u6210\u5668",children:[]},{value:"\u6a21\u578b\u5e94\u7528",id:"\u6a21\u578b\u5e94\u7528",children:[]}],d={toc:l};function g(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"\u901a\u8fc7YAML\u914d\u7f6e\u6587\u4ef6")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'# configuration for dev environment\n\n---\nreadyWork:\n  server:\n    # This is the default binding address.\n    ip: 0.0.0.0\n    # Http port if enableHttp is true.\n    httpPort: 8080\n\n  database:\n    sqlDebug: false # SQL\u8c03\u8bd5\uff0c\u8f93\u51faSQL\u5230\u65e5\u5fd7\n    dataSource: # \u6240\u6709\u7684\u6570\u636e\u6e90\u9700\u8981\u914d\u7f6e\u5728dataSource\u4e0b\u9762\n      main: # \u4e3b\u6570\u636e\u6e90\u56fa\u5b9a\u540d\u79f0\u4e3a"main"\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u540d\u79f0\u81ea\u5b9a\u4e49\n        type: mysql # \u7c7b\u578b\u652f\u6301H2\u3001Mysql\u3001Postgre\u3001Oracle\u3001SqlServer\u3001Sqlite\u3001Ignite\uff0c\u5f53\u524d\u7248\u672c\u5f3a\u70c8\u63a8\u8350Mysql\uff0c\u5176\u4ed6\u7c7b\u578b\u5c1a\u672a\u8fdb\u884c\u4e25\u683c\u6d4b\u8bd5\u3002\n        #driverClass: com.mysql.cj.jdbc.Driver  #since mysql jdbc 8, The driver is automatically registered via the SPI\n        jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&useSSL=false&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull\n        username: root\n        password: 12345678\n        #autoMapping: true # \u81ea\u52a8\u6620\u5c04\uff0c\u9ed8\u8ba4\u5f00\u542f\n        #table: demo # \u5355\u6570\u636e\u6e90\u6216\u8005\u7a0b\u5e8f\u624b\u5de5\u6620\u5c04\u65f6\u4e0d\u9700\u8981\u6b64\u8bbe\u5b9a\uff0c\u53ea\u6709\u591a\u6570\u636e\u6e90\u65f6\uff0c\u81ea\u52a8\u6620\u5c04\u6a21\u578b\u9700\u8981\u660e\u786e\u6a21\u578b\u8868\u548c\u6570\u636e\u6e90\u7684\u5173\u7cfb\uff0c\u81ea\u52a8\u6620\u5c04\u65f6\uff0c\u591a\u6570\u636e\u6e90\u7684\u8868\u540d\u4e0d\u80fd\u91cd\u590d\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\u8be5\u95ee\u9898\n        #ignoreTable: xxx # \u5ffd\u7565\u67d0\u4e9b\u8868\uff0c\u5982\u679c\u6709\u67d0\u4e9b\u8868\u662f\u4e0d\u9700\u8981\u8be5\u9879\u76ee\u8bbf\u95ee\n        #sqlTemplatePath: /sql/ # SQL\u6a21\u7248\u6587\u4ef6\u8def\u5f84\uff0c\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u8def\u5f84\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9879\uff0c\u4e0b\u9762\u7684sqlTemplate\u5c31\u76f8\u5bf9\u4e8e\u6b64\u8def\u5f84\n        sqlTemplate: sql/demo.sql # \u9700\u8981\u52a0\u8f7d\u7684SQL\u6a21\u7248\u6587\u4ef6\uff0c\u5982\u679c\u4e0a\u9762sqlTemplatePath\u6ca1\u6709\u6307\u660e\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u7684\u8def\u5f84\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"\u901a\u8fc7\u7a0b\u5e8f\u914d\u7f6e")),Object(i.b)("p",null,"\u57fa\u672c\u4e0aBoostrap\u4e2d\u7684\u914d\u7f6e\u9879\u90fd\u53ef\u4ee5\u901a\u8fc7globalConfig\u8fdb\u884c\u7a0b\u5e8f\u5316\u914d\u7f6e\uff0c\u6570\u636e\u5e93\u914d\u7f6e\u4e5f\u4e0d\u4f8b\u5916\u3002"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public class Main extends Application {\n\n    @Override\n    protected void globalConfig(ApplicationConfig config) {\n        // \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u9879\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u7a0b\u5e8f\u5316\u914d\u7f6e\u5b8c\u6210\uff0c\u4e0a\u9762\u901a\u8fc7YAMl\u914d\u7f6e\u4e86main\u6570\u636e\u6e90\u5e76\u52a0\u8f7d\u4e86demo.sql\u6a21\u7248\uff0c\u8fd9\u91cc\u901a\u8fc7\u7a0b\u5e8f\u914d\u7f6e\u4e86test\u6570\u636e\u6e90\u5e76\u52a0\u8f7dtest.sql\u6a21\u7248\n        config.getDatabase().setDataSource("test", new DataSourceConfig()\n                //.setType(DataSourceConfig.TYPE_MYSQL) // mysql\u662f\u9ed8\u8ba4\u9879\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u7528\u6307\u5b9a\n                .setJdbcUrl("jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&useSSL=false&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull")\n                .setUsername("root").setPassword("12345678").setSqlTemplate("sql/test.sql")\n        );\n    }\n\n    @Override\n    protected void initialize() {\n        // \u5982\u679c\u914d\u7f6e\u4e2d\u5173\u95ed\u4e86autoMapping\uff0c\u90a3\u4e48\u901a\u8fc7\u8fd9\u91cc\u8fdb\u884c\u6570\u636e\u6a21\u578b\u6620\u5c04\u3002\n        // dbManager().getDatasourceAgent("main").addMapping("demo", Demo.class);\n    }\n\n    public static void main(String[] args) {\n        Ready.For(Main.class).Work(args);\n    }\n}\n')),Object(i.b)("h2",{id:"\u6f14\u793a\u6570\u636e"},"\u6f14\u793a\u6570\u636e"),Object(i.b)("p",null,"\u8bf7\u5148\u5efa\u7acb\u4e00\u4e2atest\u7684\u6570\u636e\u5e93\uff0c\u7136\u540e\u5bfc\u5165\u4e0b\u9762\u7684demo\u8868\u7ed3\u6784\u548c\u6570\u636e\u3002\u6216\u8005\u76f4\u63a5\u5bfc\u5165demo.sql\uff0c\u6587\u4ef6\u5728examples\\quickstart\u793a\u4f8b\u5305\u4e2d\u7684resources\u6587\u4ef6\u5939\u3002"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-mysql"},"\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for demo\n-- ----------------------------\nDROP TABLE IF EXISTS `demo`;\nCREATE TABLE `demo` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(20) DEFAULT NULL,\n  `gender` int DEFAULT '1',\n  `age` int DEFAULT NULL,\n  `height` int DEFAULT NULL,\n  `weight` int DEFAULT NULL,\n  `hobbies` text,\n  `created` datetime DEFAULT NULL,\n  `modified` datetime DEFAULT NULL,\n  `status` int DEFAULT NULL,\n  `isDeleted` bit(1) DEFAULT NULL,\n  `version` int DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\n\n-- ----------------------------\n-- Records of demo\n-- ----------------------------\nBEGIN;\nINSERT INTO `demo` VALUES (1, 'Jimmy', 1, 18, 170, 65, 'Study', '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (2, 'name2', 0, 18, 170, 68, 'PC Games', '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (3, 'name3', 1, 20, 168, 65, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (4, 'name4', 0, 20, 172, 70, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (5, 'name5', 1, 22, 170, 72, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (6, 'name6', 0, 23, 165, 60, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (7, 'name7', 1, 25, 175, 80, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (8, 'name8', 0, 25, 172, 75, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (9, 'name9', 1, 26, 160, 60, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (10, 'name10', 0, 28, 165, 68, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (11, 'name11', 1, 28, 168, 65, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (12, 'name12', 1, 28, 172, 72, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (13, 'name13', 0, 30, 175, 75, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (14, 'name14', 1, 30, 168, 80, 'Sports', '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (15, 'name15', 1, 32, 165, 60, 'Study', '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (16, 'name16', 0, 33, 178, 75, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (17, 'name17', 1, 33, 180, 80, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (18, 'name18', 1, 20, 175, 72, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (19, 'name19', 0, 36, 168, 60, NULL, '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nINSERT INTO `demo` VALUES (20, 'name20', 1, 36, 172, 65, 'Chess', '2021-08-08 08:08:08', '2021-08-08 08:08:08', 1, b'0', 0);\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n")),Object(i.b)("h2",{id:"\u57fa\u672c\u4f7f\u7528"},"\u57fa\u672c\u4f7f\u7528"),Object(i.b)("p",null,"\u4e0d\u4f7f\u7528\u4efb\u4f55\u9ad8\u7ea7\u7279\u6027\uff0c\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u5e93\u8868\u3002\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6DB\u5b9e\u4f8b\u8fdb\u884c\u5404\u7c7b\u57fa\u7840SQL\u64cd\u4f5c\u3002\u4ee5\u4e0b\u662f\u4e00\u7ec4\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u57fa\u672c\u589e\u5220\u6539\u67e5\u7684\u64cd\u4f5c\u5b9e\u4f8b\uff1a"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public class BasicDemoService {\n\n    // \u9ed8\u8ba4\u6570\u636e\u6e90\u662f\u5f53\u524d\u6570\u636e\u6e90\uff0c\u901a\u5e38\u662f\u4e3b\u6570\u636e\u6e90main\n    private static Db db = Ready.dbManager().getDb();\n\n    // \u8fd4\u56de\u7ed3\u679c\u662fRecord\u7c7b\u578b\uff0c\u57fa\u7840\u6570\u636e\u5e93\u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u90fd\u5c06\u4ee5Record\u7c7b\u578b\u5b58\u5728\uff0c\u5b83\u662f\u4e00\u4e2a\u57fa\u4e8eMap\u7684\u5bb9\u5668\u3002\n    public Record getByName(String name) {\n        var sql = "select * from demo where name = ? limit 1";\n        return db.findFirst(sql, name);\n    }\n\n    // \u591a\u6570\u636e\u6e90\u53ef\u4ee5\u968f\u65f6\u5207\u6362\uff0cdb.use("test")\u5207\u6362\u5230test\u6570\u636e\u6e90\n    public Record getByNameFromTest(String name) {\n        var sql = "select * from demo where name = ? limit 1";\n        return db.use("test").findFirst(sql, name);\n    }\n\n    // \u8fd4\u56de\u591a\u884c\u6570\u636e\u65f6\uff0c\u4ee5List<Record>\u5f62\u5f0f\u8fd4\u56de\n    public List<Record> getAllByAge(int age) {\n        var sql = "select * from demo where age > ?";\n        return db.find(sql, age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\u65f6\uff0c\u4ee5Page<Record>\u5f62\u5f0f\u8fd4\u56de\uff0c\u6ce8\u610fSQL\u8bed\u53e5\u5206\u62c6\n    public Page<Record> getPageByAge(int page, int size, int age) {\n        return db.paginate(page, size, "select *", "from demo where age > ?", age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\u652f\u6301GROUP BY\uff0c\u6ce8\u610fSQL\u8bed\u53e5\u5206\u62c6\uff0cMYSQL\u670d\u52a1\u5668\u9700\u8981\u5173\u95edONLY_FULL_GROUP_BY\n    public Page<Record> getPageByAgeWithGroupBy(int page, int size, int age) {\n        return db.paginate(page, size, true, "select *", "from demo where age > ? group by age", age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\uff0c\u5b8c\u5168\u81ea\u5b9a\u4e49SQL\u67e5\u8be2\uff0c\u4e0a\u9762\u7684\u67e5\u8be2\u4f1a\u81ea\u52a8\u8fdb\u884cselect count(*) ...\u67e5\u8be2\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5b8c\u5168\u6309\u9700\u81ea\u5b9a\u4e49\n    public Page<Record> getPageByFullSql(int page, int size, int age) {\n        String from = "from demo where age > ?";\n        String totalRowSql = "select count(*) " + from;\n        String findSql = "select * " + from + " order by age";\n        return db.paginateByFullSql(page, size, totalRowSql, findSql, age);\n    }\n\n    // \u6dfb\u52a0\u4e00\u884c\u6570\u636e\uff0c\u7eafSQL\u64cd\u4f5c\n    public int insertBySql(){\n        return db.update("insert into demo (name, gender, age, height, weight) values(?,?,?,?,?)", "test", 1, 20, 170, 65);\n    }\n\n    // \u6dfb\u52a0\u4e00\u884c\u6570\u636e\uff0c\u901a\u8fc7record\u5bf9\u8c61\u64cd\u4f5c\n    public boolean insertByRecord(){\n        return db.save("demo",\n                db.record(Map.of("name","test", "gender", 1, "age", 20, "height", 170, "weight", 65)));\n    }\n\n    // \u4fee\u6539\u6570\u636e\uff0c\u7eafSQL\u64cd\u4f5c\n    public int updateAgeBySql(String name, int age){\n        return db.update("update demo set age = ? where name = ?", age, name);\n    }\n\n    // \u4fee\u6539\u6570\u636e\uff0c\u5148\u67e5\u8be2\u51farecord\u8bb0\u5f55\u5217\uff0c\u518d\u901a\u8fc7record\u5bf9\u8c61\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u8868\u7684\u4e3b\u952e\u5217\u540d\u5fc5\u987b\u7edf\u4e00\u4e3a"id"\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\n    public int updateAgeByRecord(String name, int age){\n        var list = db.find("select * from demo where name = ?", name);\n        int count = 0;\n        for(Record record : list) {\n            if(db.update("demo", record.set("age", age))){\n                count ++;\n            }\n        }\n        return count;\n    }\n\n    // \u4fee\u6539\u4e00\u884c\u6570\u636e\uff0c\u901a\u8fc7\u4e3b\u952e\u7ed3\u5408record\u5bf9\u8c61\u64cd\u4f5c\uff0c\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u8868\u7684\u4e3b\u952e\u5217\u540d\u5fc5\u987b\u7edf\u4e00\u4e3a"id"\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\n    public boolean updateAgeByRecordId(int id, int age){\n        return db.update("demo", db.record().set("id", id).set("age", age));\n    }\n\n    // \u5220\u9664\u6570\u636e\uff0c\u7eafSQL\u64cd\u4f5c\n    public int deleteBySql(){\n        return db.delete("delete from demo where name = ?", "test");\n    }\n\n    // \u5220\u9664\u6570\u636e\uff0c\u5148\u67e5\u8be2\u51farecord\u8bb0\u5f55\u5217\uff0c\u518d\u901a\u8fc7record\u5bf9\u8c61\u8fdb\u884c\u5220\u9664\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u8868\u7684\u4e3b\u952e\u5217\u540d\u5fc5\u987b\u7edf\u4e00\u4e3a"id"\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\n    public int deleteByRecord() {\n        var list = db.find("select * from demo where name = ?", "test");\n        int count = 0;\n        for(Record record : list) {\n            if(db.delete("demo", record)){\n                count ++;\n            }\n        }\n        return count;\n    }\n\n    // \u5220\u9664\u4e00\u884c\u6570\u636e\uff0c\u901a\u8fc7\u4e3b\u952e\u7ed3\u5408record\u5bf9\u8c61\u64cd\u4f5c\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u8868\u7684\u4e3b\u952e\u5217\u540d\u5fc5\u987b\u7edf\u4e00\u4e3a"id"\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\n    public boolean deleteByRecordId(int id){\n        return db.delete("demo", db.record().set("id", id));\n    }\n}\n')),Object(i.b)("p",null,'\u4f8b\u5b50\u4e2d\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u6570\u636e\u6e90\uff0c\u901a\u5e38\u662f\u4e3b\u6570\u636e\u6e90main\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6570\u636e\u6e90\u6216\u8005\u9700\u8981\u5207\u6362\u6570\u636e\u6e90\uff0c\u53ef\u4ee5\u901a\u8fc7db.use("\u6570\u636e\u6e90\u540d\u79f0")\u52a8\u6001\u5207\u6362\u3002'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'@RequestMapping(value = "/basic/")\npublic class BasicController extends Controller {\n\n    @Autowired\n    private BasicDemoService demoService;\n\n    @RequestMapping\n    public Result<String> index() {\n        return Success.of("hello world !");\n    }\n\n    @RequestMapping\n    public Result<Record> getByName() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByName(name));\n    }\n\n    @RequestMapping\n    public Result<Record> getByNameFromTest() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByNameFromTest(name));\n    }\n\n    @RequestMapping\n    public Result<List<Record>> getAllByAge() {\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getAllByAge(age));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getPageByAge() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByAge(page, size, age));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getPageByAgeWithGroupBy() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByAgeWithGroupBy(page, size, age));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getPageByFullSql() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByFullSql(page, size, age));\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public Result<Integer> insertBySql() {\n        return Success.of(demoService.insertBySql());\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public Result<Boolean> insertByRecord() {\n        return Success.of(demoService.insertByRecord());\n    }\n\n    @RequestMapping(method = RequestMethod.PUT)\n    public Result<Integer> updateAgeBySql() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.updateAgeBySql(name, age));\n    }\n\n    @RequestMapping(method = RequestMethod.PUT)\n    public Result<Integer> updateAgeByRecord() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.updateAgeByRecord(name, age));\n    }\n\n    @RequestMapping(method = RequestMethod.PUT)\n    public Result<Boolean> updateAgeByRecordId() {\n        int id = Assert.notNull(getParamToInt("id"), "id is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.updateAgeByRecordId(id, age));\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE)\n    public Result<Integer> deleteBySql() {\n        return Success.of(demoService.deleteBySql());\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE)\n    public Result<Integer> deleteByRecord() {\n        return Success.of(demoService.deleteByRecord());\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE)\n    public Result<Boolean> deleteByRecordId() {\n        int id = Assert.notNull(getParamToInt("id"), "id is required");\n        return Success.of(demoService.deleteByRecordId(id));\n    }\n\n}\n')),Object(i.b)("p",null,"\u521b\u5efa\u4e00\u4e2aController\u6765\u4f7f\u7528\u4e0a\u9762\u7684BasicDemoService\uff0c\u901a\u8fc7\u8bbf\u95ee",Object(i.b)("inlineCode",{parentName:"p"},"http://127.0.0.1:8080/basic/..."),"\u5373\u53ef\u67e5\u770b\u7ed3\u679c\u3002"),Object(i.b)("h2",{id:"\u4ee3\u7801\u751f\u6210\u5668"},"\u4ee3\u7801\u751f\u6210\u5668"),Object(i.b)("p",null,"\u6570\u636e\u5e93\u8868\u7ed3\u6784\u521b\u5efa\u597d\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u751f\u6210\u5668\u81ea\u52a8\u751f\u6210\u8868\u6a21\u578b\uff0c\u65b9\u4fbf\u8fdb\u884c\u5feb\u901f\u4e1a\u52a1\u5f00\u53d1\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'public class CodeGenerator {\n\n    // \u8fd9\u91cc\u4e00\u5171\u5b9e\u73b0\u4e863\u5404\u7248\u672c\u7684\u4ee3\u7801\u751f\u6210\u65b9\u6cd5\uff0c\u7531\u7b80\u5355\u5230\u5b9a\u5236\u5316\u7684\u8fdb\u884c\u4e86\u6f14\u793a\n    public static void main(String[] args) {\n        customizedWithPath(); // \u6839\u636e\u9700\u8981\u9009\u62e9\u751f\u6210\u65b9\u6848\n    }\n\n    // \u6700\u7b80\u5355\u7684\u751f\u6210\u5668\uff0c\u5b9a\u4e49\u597d\u6a21\u578b\u548c\u670d\u52a1\u7c7b\u7684\u5305\u540d\uff0c\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u5230\u5f53\u524d\u9879\u76ee\u4e2d\n    public static void easy() {\n        String modelPackage = "work.ready.test.model";\n        String servicePackage = "work.ready.test.service";\n        // \u4e0b\u9762\u9ed8\u8ba4\u4f7f\u7528bootstrap.yml\u4e2d\u7684main\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u9488\u5bf9main\u6570\u636e\u6e90\u4e0b\u7684\u6240\u4ee5\u8868\n        var generator = new Generator(DatabaseManager.MAIN_CONFIG_NAME, modelPackage, servicePackage);\n        generator.generate();\n    }\n\n    // \u5b9a\u5236\u751f\u6210\u5668\uff0c\u5b9a\u4e49\u597d\u6a21\u578b\u548c\u670d\u52a1\u7c7b\u7684\u5305\u540d\uff0c\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u5230\u5f53\u524d\u9879\u76ee\u4e2d\n    public static void customized() {\n        String modelPackage = "work.ready.test.model";\n        String baseModelPackage = modelPackage + ".base";\n        String servicePackage = "work.ready.test.service";\n        // \u4e0b\u9762\u9ed8\u8ba4\u4f7f\u7528bootstrap.yml\u4e2d\u7684main\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u9488\u5bf9main\u6570\u636e\u6e90\u4e0b\u7684\u6240\u4ee5\u8868\n        var generator = new Generator(Generator.getMainDatasource(), Generator.getMainMetaBuilder(),\n                new BaseModelGenerator(baseModelPackage),\n                new ModelGenerator(modelPackage, baseModelPackage),\n                new ServiceInterfaceGenerator(servicePackage, modelPackage), //\u5982\u679c\u4e0d\u9700\u8981\u751f\u6210service\uff0c\u53ef\u4ee5\u4e3anull\n                new ServiceImplGenerator(servicePackage, modelPackage)  //\u5982\u679c\u4e0d\u9700\u8981\u751f\u6210service\uff0c\u53ef\u4ee5\u4e3anull\n        );\n        generator.generate();\n    }\n\n    // \u5b9a\u5236\u751f\u6210\u5668\uff0c\u5b9a\u4e49\u597d\u6a21\u578b\u548c\u670d\u52a1\u7c7b\u7684\u5305\u540d\uff0c\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u5230\u6307\u5b9a\u8def\u5f84\n    public static void customizedWithPath() {\n        String modelPackage = "work.ready.test.model";\n        String baseModelPackage = modelPackage + ".base";\n        String servicePackage = "work.ready.test.service";\n\n        // \u5b9a\u4e49\u5404\u7c7b\u578b\u4ee3\u7801\u7684\u4fdd\u5b58\u8def\u5f84\n        String path = PathUtil.getProjectRootPath() + "/src/test/java/";\n        String baseModelPath = path + baseModelPackage.replace(".", "/");\n        String modelPath = path + modelPackage.replace(".", "/");\n        String servicePath = path + servicePackage.replace(".", "/");\n        String serviceImplPath = path + (servicePackage + ".impl").replace(".", "/");\n\n        // \u4e0b\u9762\u9ed8\u8ba4\u4f7f\u7528bootstrap.yml\u4e2d\u7684main\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u9488\u5bf9main\u6570\u636e\u6e90\u4e0b\u7684\u6240\u4ee5\u8868\n        String ds = "main";\n        var generator = new Generator(Generator.getDatasource(ds), Generator.getMetaBuilder(ds),\n                new BaseModelGenerator(baseModelPackage, baseModelPath),\n                new ModelGenerator(modelPackage, baseModelPackage, modelPath),\n                new ServiceInterfaceGenerator(servicePackage, modelPackage, servicePath),  //\u5982\u679c\u4e0d\u9700\u8981\u751f\u6210service\uff0c\u53ef\u4ee5\u4e3anull\n                new ServiceImplGenerator(servicePackage, modelPackage, serviceImplPath)  //\u5982\u679c\u4e0d\u9700\u8981\u751f\u6210service\uff0c\u53ef\u4ee5\u4e3anull\n        );\n        generator.setGenerateDataDictionary(true);\n        generator.setGenerateRemarks(true);\n        generator.generate();\n    }\n\n}\n')),Object(i.b)("h2",{id:"\u6a21\u578b\u5e94\u7528"},"\u6a21\u578b\u5e94\u7528"),Object(i.b)("p",null,"\u4f7f\u7528\u6a21\u578b\u64cd\u4f5c\u6bd4\u76f4\u63a5\u6570\u636e\u5e93\u8bbf\u95ee\u66f4\u52a0\u4fbf\u6377\uff0c\u80fd\u901a\u8fc7\u64cd\u4f5c\u5bf9\u8c61\u5c5e\u6027\u65b9\u5f0f\u5bf9\u6570\u636e\u5b57\u6bb5\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e14\u62e5\u6709\u66f4\u591a\u6269\u5c55\u529f\u80fd\u3002\u5e94\u7528\u6a21\u578b\u9700\u8981\u5148\u5efa\u7acb\u8868\u7684\u6a21\u578b\u5e76\u8fdb\u884c\u8868\u5173\u7cfb\u6620\u5c04\uff0c\u5efa\u7acb\u8868\u6a21\u578b\u901a\u5e38\u7531\u4ee3\u7801\u751f\u6210\u5668\u5b8c\u6210\uff0c\u751f\u6210\u5668\u4f1a\u4e3a\u6bcf\u5f20\u8868\u751f\u62102\u4e2aJava\u7c7b\u6587\u4ef6\u3002\u5982\u4e0b\u6240\u793a\uff1a"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:'title="BaseDemo.java"',title:'"BaseDemo.java"'},'/**\n * Generated by Ready.Work\n */\n@SuppressWarnings("serial")\npublic abstract class BaseDemo<M extends BaseDemo<M>> extends Model<M> implements Bean {\n\n    public M setId(Integer id) {\n        set("id", id);\n        return (M)this;\n    }\n\n    public Integer getId() {\n        return getInt("id");\n    }\n\n    public M setName(String name) {\n        set("name", name);\n        return (M)this;\n    }\n\n    public String getName() {\n        return getStr("name");\n    }\n\n    public M setGender(Integer gender) {\n        set("gender", gender);\n        return (M)this;\n    }\n\n    public Integer getGender() {\n        return getInt("gender");\n    }\n\n    public M setAge(Integer age) {\n        set("age", age);\n        return (M)this;\n    }\n\n    public Integer getAge() {\n        return getInt("age");\n    }\n\n    public M setHeight(Integer height) {\n        set("height", height);\n        return (M)this;\n    }\n\n    public Integer getHeight() {\n        return getInt("height");\n    }\n\n    public M setWeight(Integer weight) {\n        set("weight", weight);\n        return (M)this;\n    }\n\n    public Integer getWeight() {\n        return getInt("weight");\n    }\n\n    public M setHobbies(String hobbies) {\n        set("hobbies", hobbies);\n        return (M)this;\n    }\n\n    public String getHobbies() {\n        return getStr("hobbies");\n    }\n\n    public M setCreated(java.util.Date created) {\n        set("created", created);\n        return (M)this;\n    }\n\n    public java.util.Date getCreated() {\n        return get("created");\n    }\n\n    public M setModified(java.util.Date modified) {\n        set("modified", modified);\n        return (M)this;\n    }\n\n    public java.util.Date getModified() {\n        return get("modified");\n    }\n\n    public M setStatus(Integer status) {\n        set("status", status);\n        return (M)this;\n    }\n\n    public Integer getStatus() {\n        return getInt("status");\n    }\n\n    public M setIsDeleted(Boolean isDeleted) {\n        set("isDeleted", isDeleted);\n        return (M)this;\n    }\n\n    public Boolean getIsDeleted() {\n        return get("isDeleted");\n    }\n\n    public M setVersion(Integer version) {\n        set("version", version);\n        return (M)this;\n    }\n\n    public Integer getVersion() {\n        return getInt("version");\n    }\n\n}\n```\n\u4e0a\u9762\u8fd9\u4e2aBaseDemo\u7c7b\u6587\u4ef6\u662f\u5bf9\u5e94\u8868\u7684\u6a21\u578b\u57fa\u7840\u7c7b\uff0c\u4e0d\u8981\u5bf9\u5b83\u505a\u4efb\u4f55\u4fee\u6539\u6216\u589e\u5f3a\uff0c\u5982\u679c\u6570\u636e\u5e93\u7ed3\u6784\u6709\u53d8\u66f4\uff0c\u91cd\u65b0\u751f\u6210\u8986\u76d6\u8be5\u6587\u4ef6\u5373\u53ef\u3002\n```java title="Demo.java"\n/**\n * Generated by Ready.Work\n */\n@Table(tableName = "demo", primaryKey = "id")\npublic class Demo extends BaseDemo<Demo> {\n\n}\n```\n\u8fd9\u4e2aDemo\u7c7b\u6587\u4ef6\u662f\u65b9\u4fbf\u5bf9\u6a21\u578b\u8fdb\u884c\u6269\u5c55\u7684\u7c7b\uff0c\u5982\u679c\u6709\u9700\u8981\u5bf9\u6a21\u578b\u8fdb\u884c\u6269\u5c55\u6216\u589e\u5f3a\uff0c\u8bf7\u52a0\u5728\u8fd9\u4e2a\u7c7b\u4e2d\u3002\n\u63a8\u8350\u5bf9Model\u8fdb\u884cModel\u7ea7\u522bService\u5c42\u5c01\u88c5\uff0c\u65b9\u4fbf\u6269\u5c55\u4e5f\u662f\u5e94\u5bf9\u540e\u7eed\u8868\u7ed3\u6784\u53d1\u751f\u53d8\u5316\u65f6\u53ef\u4ee5\u5728Model\u7684Service\u5c42\u8fdb\u884c\u534f\u8c03\u6216\u517c\u5bb9\u3002\n\u672c\u6846\u67b6\u4e2dModel\u7684Service\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\uff0c\u63a8\u8350\u76f4\u63a5\u7ee7\u627f\u6846\u67b6\u63d0\u4f9b\u7684ModelService\uff0c\u540e\u7eed\u6846\u67b6\u589e\u5f3aModel\u5c42\u76f8\u5173\u529f\u80fd\u65f6\u80fd\u81ea\u52a8\u589e\u5f3a\u3002\u89c1\u4e0b\u9762\u5b9e\u4f8b\uff1a\n```java title="ModelDemoService.java"\npublic interface ModelDemoService {\n    Demo getByName(String name);\n\n    Demo getByNameFromTest(String name);\n\n    List<Demo> getAllByAge(int age);\n\n    Page<Demo> getPageByAge(int page, int size, int age);\n\n    Page<Demo> getPageByAgeWithGroupBy(int page, int size, int age);\n\n    Page<Demo> getPageByFullSql(int page, int size, int age);\n\n    Boolean addRecord(String name, int gender, int age);\n\n    Boolean updateRecord(String name, int age);\n\n    Boolean updateRecord(int id, int age);\n\n    Boolean deleteRecord(String name);\n\n    Boolean deleteRecord(int id);\n}\n```\n\u4e0a\u9762\u4e3aModel\u7684Service\u5c42\u63a5\u53e3\u7c7b\uff0c\u901a\u5e38Model\u7684Service\u53ea\u5bf9\u5f53\u524dModel\u8fdb\u884c\u64cd\u4f5c\uff0c\u5373\u53ea\u5bf9\u5f53\u524d\u8868\u8fdb\u884c\u64cd\u4f5c\u3002\n```java title="ModelDemoServiceImpl.java"\n@Service\npublic class ModelDemoServiceImpl extends ModelService<Demo> implements ModelDemoService {\n\n    // \u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2aDemo\u5bf9\u8c61\u3002\n    @Override\n    public Demo getByName(String name) {\n        String sql = "select * from demo where name = ? limit 1";\n        return dao.findFirst(sql, name);\n    }\n\n    // \u591a\u6570\u636e\u6e90\u53ef\u4ee5\u968f\u65f6\u5207\u6362\uff0cuse("test")\u5207\u6362\u5230test\u6570\u636e\u6e90\n    @Override\n    public Demo getByNameFromTest(String name) {\n        String sql = "select * from demo where name = ? limit 1";\n        return use("test").findFirst(sql, name);\n    }\n\n    // \u8fd4\u56de\u591a\u884c\u6570\u636e\u65f6\uff0c\u6570\u636e\u4ee5Demo\u5bf9\u8c61\u5c01\u88c5\u540e\u4ee5List<Demo>\u5f62\u5f0f\u8fd4\u56de\n    @Override\n    public List<Demo> getAllByAge(int age) {\n        var sql = "select * from demo where age > ?";\n        return dao.find(sql, age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\u65f6\uff0c\u4ee5Page<Demo>\u5f62\u5f0f\u8fd4\u56de\uff0c\u6ce8\u610fSQL\u8bed\u53e5\u5206\u62c6\n    @Override\n    public Page<Demo> getPageByAge(int page, int size, int age) {\n        return dao.paginate(page, size, "select *", "from demo where age > ?", age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\u652f\u6301GROUP BY\uff0c\u6ce8\u610fSQL\u8bed\u53e5\u5206\u62c6\uff0cMYSQL\u670d\u52a1\u5668\u9700\u8981\u5173\u95edONLY_FULL_GROUP_BY\n    @Override\n    public Page<Demo> getPageByAgeWithGroupBy(int page, int size, int age) {\n        return dao.paginate(page, size, true, "select *", "from demo where age > ? group by age", age);\n    }\n\n    // \u7ffb\u9875\u67e5\u8be2\uff0c\u5b8c\u5168\u81ea\u5b9a\u4e49SQL\u67e5\u8be2\uff0c\u4e0a\u9762\u7684\u67e5\u8be2\u4f1a\u81ea\u52a8\u8fdb\u884cselect count(*) ...\u67e5\u8be2\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5b8c\u5168\u6309\u9700\u81ea\u5b9a\u4e49\n    @Override\n    public Page<Demo> getPageByFullSql(int page, int size, int age) {\n        String from = "from demo where age > ?";\n        String totalRowSql = "select count(*) " + from;\n        String findSql = "select * " + from + " order by age";\n        return dao.paginateByFullSql(page, size, totalRowSql, findSql, age);\n    }\n\n    // \u63d2\u5165\u4e00\u6761\u8bb0\u5f55\uff0c\u521b\u5efa\u4e00\u4e2aDemo\u5bf9\u8c61\uff0c\u8bbe\u5b9a\u9700\u8981\u7684\u5c5e\u6027\u5373\u5b57\u6bb5\u503c\uff0c\u7136\u540e\u76f4\u63a5save\u4fdd\u5b58\u3002\n    @Override\n    public Boolean addRecord(String name, int gender, int age) {\n        return new Demo().setName(name).setGender(gender).setAge(age).save();\n    }\n\n    // \u6309\u6761\u4ef6\u4fee\u6539\u4e00\u6761\u8bb0\u5f55\uff0c\u6309\u6761\u4ef6\u67e5\u8be2\u51fa\u8981\u4fee\u6539\u7684Demo\u5bf9\u8c61\uff0c\u8bbe\u5b9a\u9700\u8981\u4fee\u6539\u7684\u5c5e\u6027\u5373\u5b57\u6bb5\u503c\uff0c\u7136\u540e\u76f4\u63a5update\u66f4\u65b0\u3002\n    @Override\n    public Boolean updateRecord(String name, int age) {\n        return dao.findFirst("select * from demo where name = ?", name).setAge(age).update();\n    }\n\n    // \u6309ID\u4fee\u6539\u4e00\u6761\u8bb0\u5f55\uff0c\u6309ID\u67e5\u8be2\u51fa\u8981\u4fee\u6539\u7684Demo\u5bf9\u8c61\uff0c\u8bbe\u5b9a\u9700\u8981\u4fee\u6539\u7684\u5c5e\u6027\u5373\u5b57\u6bb5\u503c\uff0c\u7136\u540e\u76f4\u63a5update\u66f4\u65b0\u3002\n    @Override\n    public Boolean updateRecord(int id, int age) {\n        return findById(id).setAge(age).update();\n    }\n\n    // \u6309\u6761\u4ef6\u5220\u9664\u4e00\u6761\u8bb0\u5f55\uff0c\u6309\u6761\u4ef6\u67e5\u8be2\u51fa\u8981\u5220\u9664\u7684Demo\u5bf9\u8c61\uff0c\u7136\u540e\u76f4\u63a5delete\u5220\u9664\u3002\n    @Override\n    public Boolean deleteRecord(String name) {\n        return dao.findFirst("select * from demo where name = ?", name).delete();\n    }\n\n    // \u6309ID\u5220\u9664\u4e00\u6761\u8bb0\u5f55\uff0c\u6309ID\u67e5\u8be2\u51fa\u8981\u5220\u9664\u7684Demo\u5bf9\u8c61\uff0c\u7136\u540e\u76f4\u63a5delete\u5220\u9664\u3002\n    @Override\n    public Boolean deleteRecord(int id) {\n        return findById(id).delete();\n    }\n}\n```\n\u4e0a\u9762\u662fModelDemoService\u7684\u5b9e\u73b0\u7c7b\uff0c\u6f14\u793a\u4e86Model\u65b9\u5f0f\u8fdb\u884c\u589e\u5220\u6539\u67e5\u7684\u4f7f\u7528\u3002\u548cRecord\u65b9\u5f0f\u6709\u51e0\u5206\u76f8\u4f3c\uff0c\u4f46\u8fd9\u91cc\u64cd\u4f5c\u7684\u5bf9\u8c61\u662fDemo\u6a21\u578b\uff0c\u80fd\u4ee5\u8bbf\u95ee\u5c5e\u6027\u65b9\u5f0f\u8bbf\u95ee\u5b57\u6bb5\u3002\n```java\n@RequestMapping(value = "/model/")\npublic class ModelController extends Controller {\n\n    @Autowired\n    private ModelDemoService demoService;\n\n    @RequestMapping\n    public Result<String> index() {\n        return Success.of("hello world !");\n    }\n\n    @RequestMapping\n    public Result<Demo> getByName() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByName(name));\n    }\n\n    @RequestMapping\n    public Result<Demo> getByNameFromTest() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByNameFromTest(name));\n    }\n\n    @RequestMapping\n    public Result<List<Demo>> getAllByAge() {\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getAllByAge(age));\n    }\n\n    @RequestMapping\n    public Result<Page<Demo>> getPageByAge() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByAge(page, size, age));\n    }\n\n    @RequestMapping\n    public Result<Page<Demo>> getPageByAgeWithGroupBy() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByAgeWithGroupBy(page, size, age));\n    }\n\n    @RequestMapping\n    public Result<Page<Demo>> getPageByFullSql() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getPageByFullSql(page, size, age));\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public Result<Boolean> addRecord() {\n        String name = Assert.notNull(getParam("name"), "name is required");\n        int gender = Assert.notNull(getParamToInt("gender"), "gender is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.addRecord(name, gender, age));\n    }\n\n    @RequestMapping(method = RequestMethod.PUT)\n    public Result<Boolean> updateRecord() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.updateRecord(name, age));\n    }\n\n    @RequestMapping(method = RequestMethod.PUT)\n    public Result<Boolean> updateRecordById() {\n        int id = Assert.notNull(getParamToInt("id"), "id is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.updateRecord(id, age));\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE)\n    public Result<Boolean> deleteRecord() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.deleteRecord(name));\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE)\n    public Result<Boolean> deleteRecordById() {\n        int id = Assert.notNull(getParamToInt("id"), "id is required");\n        return Success.of(demoService.deleteRecord(id));\n    }\n\n}\n```\n\u521b\u5efa\u4e00\u4e2aController\u6765\u4f7f\u7528\u4e0a\u9762\u7684ModelDemoService\uff0c\u901a\u8fc7\u8bbf\u95ee`http://127.0.0.1:8080/model/...`\u5373\u53ef\u67e5\u770b\u7ed3\u679c\u3002\n\n## SQL\u6a21\u7248\n\u672c\u6846\u67b6\u652f\u6301\u4f7f\u7528SQL\u6a21\u7248\u5bf9SQL\u8fdb\u884c\u96c6\u4e2d\u7edf\u4e00\u7ba1\u7406\u3002\u5728\u4f7f\u7528SQL\u6a21\u7248\u524d\uff0c\u9700\u8981\u5148\u901a\u8fc7sqlTemplatePath\u548csqlTemplate\u914d\u7f6e\u597dSQL\u6a21\u7248\u5b58\u653e\u8def\u5f84\u548c\u9700\u8981\u52a0\u8f7d\u7684SQL\u6a21\u7248\u6587\u4ef6\u3002\n\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7a0b\u5e8f\u6309\u9700\u52a0\u8f7d\uff1a\n```java\npublic class Main extends Application {\n\n    @Override\n    protected void initialize() {\n        // \u4e3atest\u6570\u636e\u6e90\u52a0\u8f7dsql\u6a21\u7248\n        Ready.dbManager().getDatasourceAgent("test").addSqlTemplate("sql/test.sql");\n        // \u8bbe\u7f6etest\u6570\u636e\u6e90\u4e3a\u5f00\u53d1\u8c03\u8bd5\u6a21\u5f0f\uff0c\u6b64\u65f6SQL\u6a21\u7248\u6587\u4ef6\u81ea\u5b9a\u8fdb\u884c\u70ed\u52a0\u8f7d\uff0c\u5373\u4fee\u6539SQL\u540e\u4e0d\u7528\u91cd\u542f\u5e94\u7528\u5373\u53ef\u7acb\u5373\u751f\u6548\u3002\n        Ready.dbManager().getDatasourceAgent("test").setDevMode(true);\n    }\n\n    public static void main(String[] args) {\n        Ready.For(Main.class).Work(args);\n    }\n}\n```\n\u4e0b\u9762\u662fdemo.sql\u6a21\u7248\u7684\u5185\u5bb9\uff1a\n```sql\n#namespace("demo")\n    #sql("getByName")\n      select * from demo where name = ? limit 1\n    #end\n    #sql("getByName_1")\n      select * from demo where name = #param(0) and age > #param(1) limit 1\n    #end\n    #sql("getByName_2")\n      select * from demo where name = #param(name) and age > #param(age) limit 1\n    #end\n    #sql("getByNameLike")\n      select * from demo where name like concat(\'%\', #param(0), \'%\')\n    #end\n    #sql("getAllByPage")\n      select * from demo\n    #end\n    #sql("getAllByDynamicParameter")\n      select * from demo\n        #for(x : condition)\n            #(for.first ? "where": "and") #(x.key) #param(x.value)\n        #end\n    #end\n#end\n```\n\u5176\u4e2d\u7528\u5230\u4e86\u6a21\u7248\u6307\u4ee4\uff0c#sql("sql\u6807\u8bc6")...#end\u4e3asql\u8bed\u53e5\u5b9a\u4e49\u6307\u4ee4\uff1b#param(\u6570\u5b57)\u548c#param(\u53c2\u6570\u540d)\u4e3a\u53c2\u6570\u6307\u4ee4\uff0c\u5206\u522b\u7528\u4e8e\u6309\u53c2\u6570\u53f7\u548c\u53c2\u6570\u540d\u83b7\u53d6\u53c2\u6570\u7684\u5360\u4f4d\u6807\u8bc6\uff1b#namespace("\u540d\u79f0")...#end\u6307\u4ee4\u4e3a sql \u8bed\u53e5\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\uff0c\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u8ba9#sql\u6307\u4ee4\u4f7f\u7528\u76f8\u540c\u7684key\u503c\u53bb\u5b9a\u4e49sql\uff0c\u6709\u5229\u4e8e\u6a21\u5757\u5316\u7ba1\u7406\uff1b#for(x:y)...#end\u662f\u5faa\u73af\u6307\u4ee4\uff0c\u7528\u4e8e\u904d\u5386\u53d8\u91cfy\uff1b\u66f4\u591a\u6a21\u7248\u6307\u4ee4\u89c1Jfianl\u6a21\u7248\u5f15\u64ce\u6587\u6863`https://jfinal.com/doc/6-4`\u3002\n\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u670d\u52a1\u7c7b\u6765\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u7248\uff1a\n```java\n@Service\npublic class TemplateDemoService {\n\n    private static Db db = Ready.dbManager().getDb();\n\n    public Record getByName(String name) {\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetByName\u7684sql\u8bed\u53e5\n        var sql = db.getSql("demo.getByName");\n        return db.findFirst(sql, name); // \u4f20\u5165name\uff0c\u5bf9\u5e94\u4e8esql\u8bed\u53e5\u4e2d\u7684 ? \u5360\u4f4d\u7b26\n    }\n\n    public Record getByName_1(String name, int age) {\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetByName_1\u7684sql\u8bed\u53e5\uff0c\u8bed\u53e5\u4e2d\u7684#param(0)\u548c#param(1)\uff0c\u5206\u522b\u5bf9\u5e94\u7b2c0\u4e2a\u53c2\u6570name\u548c\u7b2c1\u4e2a\u53c2\u6570age\n        var sql = db.getSqlParam("demo.getByName_1", name, age);\n        return db.findFirst(sql);\n        // \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762template\u65b9\u6cd5\uff0c\u66f4\u7b80\u6d01\uff0c\u4e0b\u9762\u7684\u65b9\u6cd5\u7b49\u540c\u4e0a\u97622\u884c\u4ee3\u7801\n        //return db.template("demo.getByName_1", name, age).findFirst();\n    }\n\n    public Record getByName_2(String name, int age) {\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetByName_2\u7684sql\u8bed\u53e5\uff0c\u8bed\u53e5\u4e2d\u7684#param(name)\u548c#param(age)\uff0c\u5206\u522b\u5bf9\u5e94\u53c2\u6570name\u548c\u53c2\u6570age\n        var sql = db.getSqlParam("demo.getByName_2", Kv.by("name", name).set("age", age));\n        return db.findFirst(sql);\n        // \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762template\u65b9\u6cd5\uff0c\u66f4\u7b80\u6d01\uff0c\u4e0b\u9762\u7684\u65b9\u6cd5\u7b49\u540c\u4e0a\u97622\u884c\u4ee3\u7801\n        //return db.template("demo.getByName_2", Kv.by("name", name).set("age", age)).findFirst();\n    }\n\n    public List<Record> getByNameLike(String name) {\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetByNameLike\u7684sql\u8bed\u53e5\uff0c\u6f14\u793a\u6a21\u7cca\u67e5\u8be2\n        return db.template("demo.getByNameLike", name).find();\n    }\n\n    public Page<Record> getAllByPage(int page, int size) {\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetAllByPage\u7684sql\u8bed\u53e5\uff0c\u6f14\u793a\u7ffb\u9875\u67e5\u8be2\n        SqlParam sqlParam = db.getSqlParam("demo.getAllByPage");\n        return db.paginate(1, 5, sqlParam);\n        // \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762template\u65b9\u6cd5\uff0c\u66f4\u7b80\u6d01\uff0c\u4e0b\u9762\u7684\u65b9\u6cd5\u7b49\u540c\u4e0a\u97622\u884c\u4ee3\u7801\n        //return db.template("demo.getAll").paginate(page, size);\n    }\n\n    public Page<Record> getAllByParam(int page, int size, Object... param) {\n        Assert.equals(0, param.length % 2, "param should be in pairs");\n        Map<String, Object> map = new HashMap<>();\n        for(int i = 0; i < param.length; i+=2) {\n            map.put(param[i].toString(), param[i+1]);\n        }\n        // \u83b7\u53d6\u4e0a\u9762SQL\u6a21\u7248\u4e2d\u540d\u4e3agetAllByDynamicParameter\u7684sql\u8bed\u53e5\uff0c\u6f14\u793a\u52a8\u6001where\u591a\u6761\u4ef6\u8bed\u53e5\u7ec4\u88c5\n        return db.template("demo.getAllByDynamicParameter", Kv.by("condition", map)).paginate(page, size);\n    }\n\n    public Page<Record> getAllByParamFromTest(int page, int size, Object... param) {\n        Assert.equals(0, param.length % 2, "param should be in pairs");\n        Map<String, Object> map = new HashMap<>();\n        for(int i = 0; i < param.length; i+=2) {\n            map.put(param[i].toString(), param[i+1]);\n        }\n        // test.sql\u4e2d\u7684\u5185\u5bb9\u662f\u4ecedemo.sql\u4e2d\u590d\u5236\u4e86\u6700\u540e\u4e00\u4e2agetAllByDynamicParameter\u8bed\u53e5\uff0c\u7136\u540e\u7531\u7a0b\u5e8f\u914d\u7f6e\u52a0\u8f7d\uff0c\u7528\u4e8e\u6f14\u793a\n        // \u4e0b\u9762\u83b7\u53d6test.sql\u6a21\u7248\u4e2d\u540d\u4e3agetAllByDynamicParameter\u7684sql\u8bed\u53e5\uff0c\u6f14\u793a\u52a8\u6001where\u591a\u6761\u4ef6\u8bed\u53e5\u7ec4\u88c5\n        return db.use("test").template("test.getAllByDynamicParameter", Kv.by("condition", map)).paginate(page, size);\n    }\n}\n```\n\u4e0b\u9762\u521b\u5efa\u4e00\u4e2aController\u6765\u4f7f\u7528\u4e0a\u9762\u7684TemplateDemoService\n```java\n@RequestMapping(value = "/template")\npublic class TemplateController extends Controller {\n\n    @Autowired\n    private TemplateDemoService demoService;\n\n    @RequestMapping\n    public Result<String> index() {\n        return Success.of("hello world !");\n    }\n\n    @RequestMapping\n    public Result<Record> getByName() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByName(name));\n    }\n\n    @RequestMapping\n    public Result<Record> getByName_1() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getByName_1(name, age));\n    }\n\n    @RequestMapping\n    public Result<Record> getByName_2() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        int age = Assert.notNull(getParamToInt("age"), "age is required");\n        return Success.of(demoService.getByName_2(name, age));\n    }\n\n    @RequestMapping\n    public Result<List<Record>> getByNameLike() {\n        String name = Assert.notEmpty(getParam("name"), "name is required");\n        return Success.of(demoService.getByNameLike(name));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getAllByPage() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        return Success.of(demoService.getAllByPage(page,size));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getAllByParam() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        return Success.of(demoService.getAllByParam(page, size, "age >", 15, "height >", 0));\n    }\n\n    @RequestMapping\n    public Result<Page<Record>> getAllByParamFromTest() {\n        int page = getParamToInt("page", 1);\n        int size = getParamToInt("size",5);\n        return Success.of(demoService.getAllByParamFromTest(page, size, "age >", 15, "height >", 0));\n    }\n}\n```\n\u901a\u8fc7\u8bbf\u95ee`http://127.0.0.1:8080/template/...`\u5373\u53ef\u67e5\u770b\u7ed3\u679c\u3002\n## H2\u6570\u636e\u5e93\n\u6846\u67b6\u96c6\u6210\u652f\u6301H2\u6570\u636e\u5e93\uff0c\u4e00\u65b9\u9762\u662f\u4e3a\u4e86\u65b9\u4fbf\u5c0f\u5fae\u5e94\u7528\u53ef\u4ee5\u4e00\u5305\u8d70\u5929\u4e0b\uff0c\u53e6\u4e00\u65b9\u9762\u662f\u6846\u67b6\u540e\u7eed\u9700\u8981\u7528\u5230H2\u6570\u636e\u5e93\u3002\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5f00\u542f\u4f7f\u7528\uff1a\n```yaml\n# configuration for dev environment\n\n---\nreadyWork:\n  server:\n    # This is the default binding address.\n    ip: 0.0.0.0\n    # Http port if enableHttp is true.\n    httpPort: 8080\n\n  database:\n    sqlDebug: false # SQL\u8c03\u8bd5\uff0c\u8f93\u51faSQL\u5230\u65e5\u5fd7\n    h2server: # H2\u6570\u636e\u5e93\u8bbe\u5b9a\n      enabled: true # \u5f00\u542fH2\u6570\u636e\u5e93\u652f\u6301\uff0c\u5373\u542f\u52a8H2\u6570\u636e\u5e93\n      #tcpPort: 9092 # H2\u6570\u636e\u5e93\u7684\u7aef\u53e3\n      #tcpAllowOthers: true # \u662f\u5426\u5141\u8bb8\u5176\u4ed6\u7535\u8111\u8fde\u63a5\u5230H2\u6570\u636e\u5e93\n      #webPort: 8088 # H2\u7684WEB\u7ba1\u7406\u7aef\u53e3\n      #webAllowOthers: true # \u662f\u5426\u5141\u8bb8\u5176\u4ed6\u7535\u8111\u8bbf\u95eeH2\u7684WEB\u7ba1\u7406\u9875\u9762\n    dataSource: # \u6240\u6709\u7684\u6570\u636e\u6e90\u9700\u8981\u914d\u7f6e\u5728dataSource\u4e0b\u9762\n      main: # \u4e3b\u6570\u636e\u6e90\u56fa\u5b9a\u540d\u79f0\u4e3a"main"\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u540d\u79f0\u81ea\u5b9a\u4e49\n        type: mysql # \u7c7b\u578b\u652f\u6301H2\u3001Mysql\u3001Postgre\u3001Oracle\u3001SqlServer\u3001Sqlite\u3001Ignite\n        #driverClass: com.mysql.cj.jdbc.Driver  #since mysql jdbc 8, The driver is automatically registered via the SPI\n        jdbcUrl: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&useSSL=false&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull\n        username: root\n        password: 12345678\n        #autoMapping: true # \u81ea\u52a8\u6620\u5c04\uff0c\u9ed8\u8ba4\u5f00\u542f\n        #table: demo # \u5355\u6570\u636e\u6e90\u6216\u8005\u7a0b\u5e8f\u624b\u5de5\u6620\u5c04\u65f6\u4e0d\u9700\u8981\u6b64\u8bbe\u5b9a\uff0c\u53ea\u6709\u591a\u6570\u636e\u6e90\u65f6\uff0c\u81ea\u52a8\u6620\u5c04\u6a21\u578b\u9700\u8981\u660e\u786e\u6a21\u578b\u8868\u548c\u6570\u636e\u6e90\u7684\u5173\u7cfb\uff0c\u81ea\u52a8\u6620\u5c04\u65f6\uff0c\u591a\u6570\u636e\u6e90\u7684\u8868\u540d\u4e0d\u80fd\u91cd\u590d\uff0c\u540e\u7eed\u4f1a\u6539\u8fdb\u8be5\u95ee\u9898\n        #ignoreTable: xxx # \u5ffd\u7565\u67d0\u4e9b\u8868\uff0c\u5982\u679c\u6709\u67d0\u4e9b\u8868\u662f\u4e0d\u9700\u8981\u8be5\u9879\u76ee\u8bbf\u95ee\n        #sqlTemplatePath: /sql/ # SQL\u6a21\u7248\u6587\u4ef6\u8def\u5f84\uff0c\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u8def\u5f84\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9879\uff0c\u4e0b\u9762\u7684sqlTemplate\u5c31\u76f8\u5bf9\u4e8e\u6b64\u8def\u5f84\n        sqlTemplate: sql/demo.sql # \u9700\u8981\u52a0\u8f7d\u7684SQL\u6a21\u7248\u6587\u4ef6\uff0c\u5982\u679c\u4e0a\u9762sqlTemplatePath\u6ca1\u6709\u6307\u660e\u8def\u5f84\uff0c\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u7684\u8def\u5f84\n      h2_1: # \u5982\u679ch2server\u6ca1\u6709\u5f00\u542fTCP\u7aef\u53e3\uff0c\u672c\u673a\u76f4\u63a5\u6587\u4ef6\u65b9\u5f0f\u8bbf\u95eeH2\u6570\u636e\u5e93\n        type: h2\n        driverClass: org.h2.Driver\n        jdbcUrl: jdbc:h2:/h2data/h2test # \u8fd9\u91cc\u7684/h2data\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\uff0c\u4ee5h2test.mv.db\u7684\u6587\u4ef6\u540d\u5b58\u653e\u5728\u8be5\u76ee\u5f55\u4e0b\n        username: root\n        password: 123456\n      h2_2: # \u5982\u679ch2server\u5f00\u542f\u4e86TCP\u7aef\u53e3\uff0c\u672c\u673a\u6216\u5176\u4ed6\u673a\u5668\u53ef\u4ee5\u901a\u8fc7TCP\u8fde\u63a5\u65b9\u5f0f\u8bbf\u95eeH2\u6570\u636e\u5e93\n        type: h2\n        driverClass: org.h2.Driver\n        jdbcUrl: jdbc:h2:tcp://localhost:9092/h2data/h2prod # \u8fd9\u91cc\u7684/h2data\u76f8\u5bf9\u4e8e\u9879\u76ee\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\uff0c\u4ee5h2prod.mv.db\u7684\u6587\u4ef6\u540d\u5b58\u653e\u5728\u8be5\u76ee\u5f55\u4e0b\n        username: root\n        password: 123456\n```\n\n')))}g.isMDXComponent=!0},135:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),g=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=g(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=g(t),u=a,p=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return t?r.a.createElement(p,s(s({ref:n},d),{},{components:t})):r.a.createElement(p,s({ref:n},d))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);